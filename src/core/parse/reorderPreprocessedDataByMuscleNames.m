function inputs = reorderPreprocessedDataByMuscleNames(inputs, muscleNames)

% indexesInParsedMuscleData = ...
%     ismember(inputs.muscleTendonColumnNames, muscleNames);

[~, ~, indexesInParsedMuscleData] = intersect( ...
    muscleNames, inputs.muscleTendonColumnNames, 'stable');

inputs.muscleTendonColumnNames = ...
    inputs.muscleTendonColumnNames(indexesInParsedMuscleData);
inputs.muscleTendonLength = inputs.muscleTendonLength(:, ...
    indexesInParsedMuscleData, :);
inputs.muscleTendonVelocity = inputs.muscleTendonVelocity(:, ...
    indexesInParsedMuscleData, :);

% indexesInParsedCoordinateData = ...
%     ismember( ...
%         inputs.inverseDynamicsMomentsColumnNames, ...
%         inputs.coordinateNames ...
%     );
% indexesInParsedMuscleAnalysisData = ...
%     ismember( ...
%         inputs.momentArmsCoordinateNames, ...
%         inputs.coordinateNames ...
%     );

[~, ~, indexesInParsedCoordinateData] = intersect( ...
    inputs.coordinateNames, inputs.inverseDynamicsMomentsColumnNames, 'stable');
[~, ~, indexesInParsedMuscleAnalysisData] = intersect( ...
    inputs.coordinateNames, inputs.momentArmsCoordinateNames, 'stable');

inputs.inverseDynamicsMoments = ...
    inputs.inverseDynamicsMoments(:, indexesInParsedCoordinateData, :);
inputs.momentArms = inputs.momentArms(:, indexesInParsedMuscleAnalysisData, ...
    indexesInParsedMuscleData, :);

if (isfield(inputs, "mtpActivationsColumnNames"))
    % indexesInParsedActivationData = ...
    %     ismember(inputs.mtpActivationsColumnNames, muscleNames);

    [~, ~, indexesInParsedActivationData] = ...
        intersect(muscleNames, inputs.mtpActivationsColumnNames, 'stable');

    inputs.mtpActivationsColumnNames = ...
        inputs.mtpActivationsColumnNames(indexesInParsedActivationData);
    inputs.mtpActivations = ...
        inputs.mtpActivations(:, indexesInParsedActivationData, :);
end

end

