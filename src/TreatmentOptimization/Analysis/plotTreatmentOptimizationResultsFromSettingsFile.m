% This function is part of the NMSM Pipeline, see file for full license.
%
% Plot Treatment Optimization results using a settings file. Optional
% arugments for different results directories.
%
% Args:
% settingsFileName (string) - xml settings file name to parse
%       directories from. If plotting synergy driven & torque driven runs,
%       use the synergy driven settings file.
% 
% resultsDirectories (array of strings) - OPTIONAL, list of results
%       directories to plot results from. Can be a mix of synergy & torque
%       directories.
% 

% ----------------------------------------------------------------------- %
% The NMSM Pipeline is a toolkit for model personalization and treatment  %
% optimization of neuromusculoskeletal models through OpenSim. See        %
% nmsm.rice.edu and the NOTICE file for more information. The             %
% NMSM Pipeline is developed at Rice University and supported by the US   %
% National Institutes of Health (R01 EB030520).                           %
%                                                                         %
% Copyright (c) 2021 Rice University and the Authors                      %
% Author(s): Robert Salati                                                %
%                                                                         %
% Licensed under the Apache License, Version 2.0 (the "License");         %
% you may not use this file except in compliance with the License.        %
% You may obtain a copy of the License at                                 %
% http://www.apache.org/licenses/LICENSE-2.0.                             %
%                                                                         %
% Unless required by applicable law or agreed to in writing, software     %
% distributed under the License is distributed on an "AS IS" BASIS,       %
% WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or         %
% implied. See the License for the specific language governing            %
% permissions and limitations under the License.                          %
% ----------------------------------------------------------------------- %

function plotTreatmentOptimizationResultsFromSettingsFile(settingsFileName, ...
    resultsDirectories)
settingsTree = xml2struct(settingsFileName);
resultsDirectory = getTextFromField(getFieldByName(settingsTree, ...
    'results_directory'));
if nargin > 1
    resultsDirectory = resultsDirectories;
end
resultsDirectory = convertCharsToStrings(resultsDirectory);
trackedQuantitiesDirectory = getTextFromField(getFieldByName(settingsTree, ...
    'tracked_quantities_directory'));
initialGuessDirectory = getTextFromField(getFieldByName(settingsTree, ...
    'initial_guess_directory'));
[isTorque, isSynergy] = parseControllers(settingsTree);
trialPrefix = getTextFromField(getFieldByName(settingsTree, ...
    'trial_name'));
modelFileName = parseElementTextByName(settingsTree, 'input_model_file');

plotJointAngles(resultsDirectory, trackedQuantitiesDirectory, ...
    trialPrefix, modelFileName);
plotJointVelocities(resultsDirectory, trackedQuantitiesDirectory, ...
    trialPrefix, modelFileName);
plotJointLoads(resultsDirectory, trackedQuantitiesDirectory, trialPrefix);
plotGroundReactions(resultsDirectory, trialPrefix);
if isTorque
    plotTorqueControls(resultsDirectory, trackedQuantitiesDirectory, ...
        trialPrefix);
end
if isSynergy
    plotMuscleActivations(resultsDirectory, trackedQuantitiesDirectory, ...
        initialGuessDirectory, trialPrefix);
    plotSynergyControls(settingsTree, resultsDirectory, ...
        trackedQuantitiesDirectory, initialGuessDirectory, trialPrefix, ...
        modelFileName);
end
end

function plotJointAngles(resultsDirectory, trackedQuantitiesDirectory, ...
    trialPrefix, modelFileName)
plotTreatmentOptimizationJointAngles( ...
    modelFileName, ...
    fullfile(trackedQuantitiesDirectory, "IKData", ...
        strcat(trialPrefix, ".sto")), ...
    fullfile(resultsDirectory, "IKData", strcat(trialPrefix, ".sto")), ...
    useRadians=0, showRmse=1);
end

function plotJointVelocities(resultsDirectory, trackedQuantitiesDirectory, ...
    trialPrefix, modelFileName)
plotTreatmentOptimizationJointVelocities(...
    modelFileName, ...
    fullfile(trackedQuantitiesDirectory, "IKData", ...
        strcat(trialPrefix, ".sto")), ...
    fullfile(resultsDirectory, strcat(trialPrefix, "_states.sto")), ...
    useRadians=1, showRmse=1);
end

function plotJointLoads(resultsDirectory, trackedQuantitiesDirectory, ...
    trialPrefix)
plotTreatmentOptimizationJointLoads( ...
    fullfile(trackedQuantitiesDirectory, "IDData", ...
        strcat(trialPrefix, ".sto")), ...
    fullfile(resultsDirectory, "IDData", strcat(trialPrefix, ".sto")), ...
    showRmse=1);
end

function plotGroundReactions(resultsDirectory, trialPrefix)
% First check which directories have ground reactions
grfIndices = logical([]);
for i = 1 : numel(resultsDirectory)
    if exist(fullfile(resultsDirectory(i), "GRFData"), 'dir')
        grfIndices(i) = 1;
    else
        grfIndices(i) = 0;
    end
end
for i = 1 : numel(resultsDirectory)
    if exist(fullfile(resultsDirectory(i), strcat(trialPrefix, ...
            "_replacedExperimentalGroundReactions.sto")), "file")
        plotTreatmentOptimizationGroundReactions( ...
            fullfile(resultsDirectory(i), strcat(trialPrefix, ...
                "_replacedExperimentalGroundReactions.sto")), ...
            fullfile(resultsDirectory(grfIndices), "GRFData", ...
                strcat(trialPrefix, ".sto")), ...
            showRmse=1);
        break
    end
end
end

function plotMuscleActivations(resultsDirectory, trackedQuantitiesDirectory, ...
    initialGuessDirectory, trialPrefix)
if exist(fullfile(initialGuessDirectory, ...
        strcat(trialPrefix, "_combinedActivations.sto")), "file")
    experimentalEmgFile = fullfile(initialGuessDirectory, ...
        strcat(trialPrefix, "_combinedActivations.sto"));
elseif exist(fullfile(initialGuessDirectory, "EMGData", ...
        strcat(trialPrefix, ".sto")), "file")
    experimentalEmgFile = fullfile(initialGuessDirectory, "EMGData", ...
        strcat(trialPrefix, ".sto"));
elseif exist(fullfile(trackedQuantitiesDirectory, "EMGData", ...
        strcat(trialPrefix, ".sto")), "file")
    experimentalEmgFile = fullfile(trackedQuantitiesDirectory, ...
        "EMGData", strcat(trialPrefix, ".sto"));
elseif exist(fullfile(trackedQuantitiesDirectory, ...
        strcat(trialPrefix, "_combinedActivations.sto")), "file")
    experimentalEmgFile = fullfile(trackedQuantitiesDirectory, ...
        strcat(trialPrefix, "_combinedActivations.sto"));
end
synergyIndices = logical([]);
for i = 1 : numel(resultsDirectory)
    if exist(fullfile(resultsDirectory(i), strcat(trialPrefix, ...
            "_synergyCommands.sto")), "file")
        synergyIndices(i) = 1;
    else
        synergyIndices(i) = 0;
    end
end
plotTreatmentOptimizationMuscleActivations(...
    fullfile(experimentalEmgFile), ...
    fullfile(resultsDirectory(synergyIndices), strcat(trialPrefix, ...
        "_combinedActivations.sto")), ...
    showRmse=1);
end

function plotTorqueControls(resultsDirectory, trackedQuantitiesDirectory, ...
    trialPrefix)
% First check which directories have torque controllers
torqueIndices = logical([]);
for i = 1 : numel(resultsDirectory)
    if exist(fullfile(resultsDirectory(i), strcat(trialPrefix, ...
            "_torqueControls.sto")), "file")
        torqueIndices(i) = 1;
    else
        torqueIndices(i) = 0;
    end
end
if exist(fullfile(trackedQuantitiesDirectory, strcat(trialPrefix, ...
        "_torqueControls.sto")), "file")
    plotTreatmentOptimizationTorqueControls( ...
        fullfile(trackedQuantitiesDirectory, strcat(trialPrefix, ...
            "_torqueControls.sto")), ...
        fullfile(resultsDirectory(torqueIndices), strcat(trialPrefix, ...
            "_torqueControls.sto")), ...
        showRmse=0)
else
    resultsDirectory = resultsDirectory(torqueIndices);
    plotTreatmentOptimizationTorqueControls(...
        fullfile(resultsDirectory(1), strcat(trialPrefix, ...
            "_torqueControls.sto")), ...
        fullfile(resultsDirectory(2:end), strcat(trialPrefix, ...
            "_torqueControls.sto")), ...
        showRmse=0)
end
end

function plotSynergyControls(settingsTree, resultsDirectory, ...
    trackedQuantitiesDirectory, initialGuessDirectory, trialPrefix, ...
    modelFileName)
[synergyNormalizationMethod, synergyNormalizationValue] = ...
    parseSynergyNormalizationMethod(settingsTree);
osimxFileName = parseElementTextByName(settingsTree, 'input_osimx_file');
synergyIndices = logical([]);
for i = 1 : numel(resultsDirectory)
    if exist(fullfile(resultsDirectory(i), strcat(trialPrefix, ...
            "_synergyCommands.sto")), "file")
        synergyIndices(i) = 1;
    else
        synergyIndices(i) = 0;
    end
end
if exist(fullfile(trackedQuantitiesDirectory, strcat(trialPrefix, ...
        "_synergyCommands.sto")), "file")
    plotTreatmentOptimizationSynergyControls( ...
        fullfile(trackedQuantitiesDirectory, ...
            strcat(trialPrefix, "_synergyCommands.sto")), ...
        fullfile(trackedQuantitiesDirectory, "synergyWeights.sto"), ...
        fullfile(resultsDirectory(synergyIndices), ...
            strcat(trialPrefix, "_synergyCommands.sto")), ...
        fullfile(resultsDirectory(synergyIndices), "synergyWeights.sto"), ...
        osimxFileName, modelFileName, ...
        synergyNormalizationMethod, synergyNormalizationValue, ...
        showRmse=1);
elseif exist(fullfile(initialGuessDirectory, ...
            strcat(trialPrefix, "_synergyCommands.sto")), "file")
    plotTreatmentOptimizationSynergyControls( ...
        fullfile(initialGuessDirectory, ...
            strcat(trialPrefix, "_synergyCommands.sto")), ...
        fullfile(initialGuessDirectory, "synergyWeights.sto"), ...
        fullfile(resultsDirectory(synergyIndices), ...
            strcat(trialPrefix, "_synergyCommands.sto")), ...
        fullfile(resultsDirectory(synergyIndices), "synergyWeights.sto"), ...
        osimxFileName, modelFileName, ...
        synergyNormalizationMethod, synergyNormalizationValue, ...
        showRmse=1);
end
if isMuscle
    if strcmp(toolName, "DesignOptimization") || strcmp(toolName, "VerificationOptimization")
        plotTreatmentOptimizationControls( ...
            [fullfile(trackedQuantitiesDirectory, strcat(trialPrefix, "_muscleControls.sto")), ...
            fullfile(resultsDirectory, strcat(trialPrefix, "_muscleControls.sto"))])

    else
        plotTreatmentOptimizationControls( ...
            fullfile(resultsDirectory, strcat(trialPrefix, "_muscleControls.sto")))
    end
    plotTreatmentOptimizationMuscleActivations(...
        fullfile(experimentalEmgFile), ...
        fullfile(resultsDirectory, strcat(trialPrefix, "_combinedActivations.sto")))
end
if isUser
    if strcmp(toolName, "DesignOptimization") | strcmp(toolName, "VerificationOptimization")
        plotTreatmentOptimizationControls( ...
            [fullfile(trackedQuantitiesDirectory, strcat(trialPrefix, "_userDefinedControls.sto")), ...
            fullfile(resultsDirectory, strcat(trialPrefix, "_userDefinedControls.sto"))])
    else
        plotTreatmentOptimizationControls( ...
            fullfile(resultsDirectory, strcat(trialPrefix, "_userDefinedControls.sto")))
    end
end
end

function [isTorque, isSynergy, isMuscle, isUser] = parseControllers(settingsTree)
user = getFieldByName(settingsTree, 'RCNLUserDefinedController');
if isstruct(user)
    isUser = true;
else
    isUser = false;
end
muscle = getFieldByName(settingsTree, 'RCNLMuscleController');
if isstruct(muscle)
    isMuscle = true;
else
    isMuscle = false;
end
synergy = getFieldByName(settingsTree, 'RCNLSynergyController');
if isstruct(synergy)
    isSynergy = true;
else
    isSynergy = false;
end
torque = getFieldByName(settingsTree, 'RCNLTorqueController');
if isstruct(torque) && ~isempty(torque.coordinate_list.Text)
    isTorque = true;
else
    isTorque = false;
end
end

function [normalizationMethod, normalizationValue] = ...
    parseSynergyNormalizationMethod(settingsTree)
synergyController = getFieldByName(settingsTree, "RCNLSynergyController");
if isstruct(synergyController)
    try
        normalizationMethod = ...
            synergyController.synergy_vector_normalization_method.Text;
        normalizationValue = str2double( ...
            synergyController.synergy_vector_normalization_value.Text);
    catch
        normalizationMethod = "sum";
        normalizationValue = 10;
    end
else
    normalizationMethod = "sum";
    normalizationValue = 10;
    return
end
end
