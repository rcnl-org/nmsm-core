% This function is part of the NMSM Pipeline, see file for full license.
%
% This function parses the settings tree resulting from xml2struct from the
% settings XML file common to all treatment optimizatin modules (trackning,
% verification, and design optimization).
%
% (struct) -> (struct, struct)
% returns the input values for all treatment optimization modules

% ----------------------------------------------------------------------- %
% The NMSM Pipeline is a toolkit for model personalization and treatment  %
% optimization of neuromusculoskeletal models through OpenSim. See        %
% nmsm.rice.edu and the NOTICE file for more information. The             %
% NMSM Pipeline is developed at Rice University and supported by the US   %
% National Institutes of Health (R01 EB030520).                           %
%                                                                         %
% Copyright (c) 2021 Rice University and the Authors                      %
% Author(s): Claire V. Hammond                                            %
%                                                                         %
% Licensed under the Apache License, Version 2.0 (the "License");         %
% you may not use this file except in compliance with the License.        %
% You may obtain a copy of the License at                                 %
% http://www.apache.org/licenses/LICENSE-2.0.                             %
%                                                                         %
% Unless required by applicable law or agreed to in writing, software     %
% distributed under the License is distributed on an "AS IS" BASIS,       %
% WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or         %
% implied. See the License for the specific language governing            %
% permissions and limitations under the License.                          %
% ----------------------------------------------------------------------- %

function inputs = makeMarkerTracking(inputs)
names = string([]);
locations = [];
bodies = [];
markerCostTerms = [ ...
    "marker_position_tracking", ...
    "marker_velocity_tracking", ...
    ];
markerConstraintTerms = [ ...
    "marker_position_deviation", ...
    "marker_position_value", ...
    "marker_velocity_deviation", ...
    "marker_velocity_value", ...
    "initial_marker_position_deviation", ...
    "initial_marker_position_value", ...
    "initial_marker_velocity_deviation", ...
    "initial_marker_velocity_value", ...
    "final_marker_position_deviation", ...
    "final_marker_position_value", ...
    "final_marker_velocity_deviation", ...
    "final_marker_velocity_value", ...
    "marker_position_periodicity", ...
    "marker_velocity_periodicity", ...
    ];
for i = 1:length(inputs.costTerms)
    costTerm = inputs.costTerms{i};
    if any(strcmp(costTerm.type, markerCostTerms))
        names(end + 1) = convertCharsToStrings(inputs.model.getMarkerSet().get( ...
            costTerm.marker).getName().toCharArray()');
        locations = cat(1, locations, ...
            Vec3ToArray(inputs.model.getMarkerSet().get(...
            costTerm.marker).get_location()));
        bodies(end + 1) = inputs.model.getBodySet().getIndex( ...
            getMarkerBodyName(inputs.model, costTerm.marker));
    end
end
for i = 1:length(inputs.path)
    constraintTerm = inputs.path{i};
    if any(strcmp(constraintTerm.type, markerConstraintTerms))
        names(end + 1) = convertCharsToStrings(inputs.model.getMarkerSet().get( ...
            constraintTerm.marker).getName().toCharArray()');
        locations = cat(1, locations, ...
            Vec3ToArray(inputs.model.getMarkerSet().get(...
            constraintTerm.marker).get_location()));
        bodies(end + 1) = inputs.model.getBodySet().getIndex( ...
            getMarkerBodyName(inputs.model, constraintTerm.marker));
    end
end
for i = 1:length(inputs.terminal)
    constraintTerm = inputs.terminal{i};
    if any(strcmp(constraintTerm.type, markerConstraintTerms))
        names(end + 1) = convertCharsToStrings(inputs.model.getMarkerSet().get( ...
            constraintTerm.marker).getName().toCharArray()');
        locations = cat(1, locations, ...
            Vec3ToArray(inputs.model.getMarkerSet().get(...
            constraintTerm.marker).get_location()));
        bodies(end + 1) = inputs.model.getBodySet().getIndex( ...
            getMarkerBodyName(inputs.model, constraintTerm.marker));
    end
end

[inputs.trackedMarkerNames, indices] = unique(names);
inputs.trackedMarkerLocations = locations(indices, :);
inputs.trackedMarkerBodyIndices = bodies(indices);
if ~isempty(inputs.trackedMarkerNames)
    [inputs.experimentalMarkerPositions, ...
        inputs.experimentalMarkerVelocities] = pointKinematics( ...
        inputs.experimentalTime, inputs.experimentalJointAngles, ...
        inputs.experimentalJointVelocities, inputs.trackedMarkerLocations, ...
        inputs.trackedMarkerBodyIndices, inputs.mexModel, ...
        inputs.coordinateNames, inputs.osimVersion);
    for i = 1:size(inputs.experimentalMarkerPositions, 3)
        experimentalMarkerPositions = ...
            reshape(inputs.experimentalMarkerPositions(:, :, i), ...
            size(inputs.experimentalMarkerPositions, 1), []);
        inputs.splineMarkerPositions{i} = makeGcvSplineSet(inputs.experimentalTime, ...
            experimentalMarkerPositions, ["x", "y", "z"]);
        experimentalMarkerVelocities = ...
            reshape(inputs.experimentalMarkerVelocities(:, :, i), ...
            size(inputs.experimentalMarkerVelocities, 1), []);
        inputs.splineMarkerVelocities{i} = makeGcvSplineSet(inputs.experimentalTime, ...
            experimentalMarkerVelocities, ["x", "y", "z"]);
    end
end
end

