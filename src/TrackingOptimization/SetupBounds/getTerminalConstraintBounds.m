% This function is part of the NMSM Pipeline, see file for full license.
%
% () -> ()
% 

% ----------------------------------------------------------------------- %
% The NMSM Pipeline is a toolkit for model personalization and treatment  %
% optimization of neuromusculoskeletal models through OpenSim. See        %
% nmsm.rice.edu and the NOTICE file for more information. The             %
% NMSM Pipeline is developed at Rice University and supported by the US   %
% National Institutes of Health (R01 EB030520).                           %
%                                                                         %
% Copyright (c) 2021 Rice University and the Authors                      %
% Author(s): Marleny Vega                                                 %
%                                                                         %
% Licensed under the Apache License, Version 2.0 (the "License");         %
% you may not use this file except in compliance with the License.        %
% You may obtain a copy of the License at                                 %
% http://www.apache.org/licenses/LICENSE-2.0.                             %
%                                                                         %
% Unless required by applicable law or agreed to in writing, software     %
% distributed under the License is distributed on an "AS IS" BASIS,       %
% WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or         %
% implied. See the License for the specific language governing            %
% permissions and limitations under the License.                          %
% ----------------------------------------------------------------------- %

function inputs = getTerminalConstraintBounds(inputs)
inputs.maxTerminal = [];
inputs.minTerminal = [];
statePositionPeriodicityConstraint = valueOrAlternate(inputs, ...
    "statePositionPeriodicityConstraint", 0);
if statePositionPeriodicityConstraint
    inputs.maxTerminal = inputs.statePositionPeriodicityMaxAllowableError * ...
        ones(1, inputs.numCoordinates);
    inputs.minTerminal = inputs.statePositionPeriodicityMinAllowableError * ...
        ones(1, inputs.numCoordinates);
end
stateVelocityPeriodicityConstraint = valueOrAlternate(inputs, ...
    "stateVelocityPeriodicityConstraint", 0);
if stateVelocityPeriodicityConstraint
    inputs.maxTerminal = cat(2, inputs.maxTerminal, ...
        inputs.stateVelocityPeriodicityMaxAllowableError * ...
        ones(1, inputs.numCoordinates));
    inputs.minTerminal = cat(2, inputs.minTerminal, ...
        inputs.stateVelocityPeriodicityMinAllowableError * ...
        ones(1, inputs.numCoordinates));
end
rootSegmentResidualLoadPeriodicityConstraint = valueOrAlternate(inputs, ...
    "rootSegmentResidualLoadPeriodicityConstraint", 0);
if rootSegmentResidualLoadPeriodicityConstraint
    inputs.maxTerminal = cat(2, inputs.maxTerminal, ...
        inputs.rootSegmentResidualLoadPeriodicityMaxAllowableError * ...
        ones(1, length(inputs.rootSegmentResidualsIndex)));
    inputs.minTerminal = cat(2, inputs.minTerminal, ...
        inputs.rootSegmentResidualLoadPeriodicityMinAllowableError * ...
        ones(1, length(inputs.rootSegmentResidualsIndex)));
end
externalForcePeriodicityConstraint = valueOrAlternate(inputs, ...
    "externalForcePeriodicityConstraint", 0);
if externalForcePeriodicityConstraint
    inputs.maxTerminal = cat(2, inputs.maxTerminal, ...
        inputs.externalForcePeriodicityMaxAllowableError * ...
        ones(1, length(inputs.trackedExternalForcesIndex)));
    inputs.minTerminal = cat(2, inputs.minTerminal, ...
        inputs.externalForcePeriodicityMinAllowableError * ...
        ones(1, length(inputs.trackedExternalForcesIndex)));
end
externalMomentPeriodicityConstraint = valueOrAlternate(inputs, ...
    "externalMomentPeriodicityConstraint", 0);
if externalMomentPeriodicityConstraint
    inputs.maxTerminal = cat(2, inputs.maxTerminal, ...
        inputs.externalMomentPeriodicityMaxAllowableError * ...
        ones(1, length(inputs.trackedExternalMomentsIndex)));
    inputs.minTerminal = cat(2, inputs.minTerminal, ...
        inputs.externalMomentPeriodicityMinAllowableError * ...
        ones(1, length(inputs.trackedExternalMomentsIndex)));
end
synergyWeightsSumConstraint = valueOrAlternate(inputs, ...
    "synergyWeightsSumConstraint", 0);
if synergyWeightsSumConstraint
    inputs.maxTerminal = cat(2, inputs.maxTerminal, ...
        inputs.synergyWeightsSumMaxAllowableError * ...
        ones(1, inputs.numSynergies));
    inputs.minTerminal = cat(2, inputs.minTerminal, ...
        inputs.synergyWeightsSumMinAllowableError * ...
        ones(1, inputs.numSynergies));
end
end