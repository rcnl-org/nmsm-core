function savePassiveMomentData(precalInputs, modeledValues, resultsDirectory)
modelPassiveMoments = permute(modeledValues.passiveModelMoments, [3 1 2]);
sizeTemp = size(modelPassiveMoments,1);
experimentalPassiveMoments = permute(precalInputs.passiveData.inverseDynamicsMoments, [3 1 2]);
numberOfMoments = size(modelPassiveMoments, 2);
dataLength = size(modelPassiveMoments, 1);
columnsWithAllZeros = all(experimentalPassiveMoments == 0, 1);
experimentalPassiveMoments = experimentalPassiveMoments(repmat(~columnsWithAllZeros, ...
    size(experimentalPassiveMoments, 1), 1, 1));
modelPassiveMoments = modelPassiveMoments(repmat(~columnsWithAllZeros, ...
    size(modelPassiveMoments, 1), 1, 1));
experimentalPassiveMoments = ...
    reshape(experimentalPassiveMoments, sizeTemp, []);
experimentalPassiveMoments = ...
    reshape(experimentalPassiveMoments', 1, numberOfMoments, dataLength);
modelPassiveMoments = ...
    reshape(modelPassiveMoments, sizeTemp, []);
modelPassiveMoments = ...
    reshape(modelPassiveMoments', 1, numberOfMoments, dataLength);
writeMtpDataToSto(precalInputs.passivePrefixes, precalInputs.prefixes, ...
    experimentalPassiveMoments, fullfile(resultsDirectory, ...
    "passiveJointMomentsExperimental"), "_passiveJointMomentsExperimental.sto")
writeMtpDataToSto(precalInputs.passivePrefixes, precalInputs.prefixes, ...
    modelPassiveMoments, fullfile(resultsDirectory, ...
    "passiveJointMomentsModeled"), "_passiveJointMomentsModeled.sto")
end